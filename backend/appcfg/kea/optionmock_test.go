// Code generated by MockGen. DO NOT EDIT.
// Source: isc.org/stork/datamodel/dhcp (interfaces: DHCPOptionAccessor)

// Package keaconfig_test is a generated GoMock package.
package keaconfig_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dhcpmodel "isc.org/stork/datamodel/dhcp"
	storkutil "isc.org/stork/util"
)

// MockDHCPOptionAccessor is a mock of DHCPOptionAccessor interface.
type MockDHCPOptionAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockDHCPOptionAccessorMockRecorder
}

// MockDHCPOptionAccessorMockRecorder is the mock recorder for MockDHCPOptionAccessor.
type MockDHCPOptionAccessorMockRecorder struct {
	mock *MockDHCPOptionAccessor
}

// NewMockDHCPOptionAccessor creates a new mock instance.
func NewMockDHCPOptionAccessor(ctrl *gomock.Controller) *MockDHCPOptionAccessor {
	mock := &MockDHCPOptionAccessor{ctrl: ctrl}
	mock.recorder = &MockDHCPOptionAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDHCPOptionAccessor) EXPECT() *MockDHCPOptionAccessorMockRecorder {
	return m.recorder
}

// GetCode mocks base method.
func (m *MockDHCPOptionAccessor) GetCode() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockDHCPOptionAccessorMockRecorder) GetCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockDHCPOptionAccessor)(nil).GetCode))
}

// GetEncapsulate mocks base method.
func (m *MockDHCPOptionAccessor) GetEncapsulate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncapsulate")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEncapsulate indicates an expected call of GetEncapsulate.
func (mr *MockDHCPOptionAccessorMockRecorder) GetEncapsulate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncapsulate", reflect.TypeOf((*MockDHCPOptionAccessor)(nil).GetEncapsulate))
}

// GetFields mocks base method.
func (m *MockDHCPOptionAccessor) GetFields() []dhcpmodel.DHCPOptionFieldAccessor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFields")
	ret0, _ := ret[0].([]dhcpmodel.DHCPOptionFieldAccessor)
	return ret0
}

// GetFields indicates an expected call of GetFields.
func (mr *MockDHCPOptionAccessorMockRecorder) GetFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFields", reflect.TypeOf((*MockDHCPOptionAccessor)(nil).GetFields))
}

// GetName mocks base method.
func (m *MockDHCPOptionAccessor) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockDHCPOptionAccessorMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockDHCPOptionAccessor)(nil).GetName))
}

// GetSpace mocks base method.
func (m *MockDHCPOptionAccessor) GetSpace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSpace indicates an expected call of GetSpace.
func (mr *MockDHCPOptionAccessorMockRecorder) GetSpace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpace", reflect.TypeOf((*MockDHCPOptionAccessor)(nil).GetSpace))
}

// GetUniverse mocks base method.
func (m *MockDHCPOptionAccessor) GetUniverse() storkutil.IPType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniverse")
	ret0, _ := ret[0].(storkutil.IPType)
	return ret0
}

// GetUniverse indicates an expected call of GetUniverse.
func (mr *MockDHCPOptionAccessorMockRecorder) GetUniverse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniverse", reflect.TypeOf((*MockDHCPOptionAccessor)(nil).GetUniverse))
}

// IsAlwaysSend mocks base method.
func (m *MockDHCPOptionAccessor) IsAlwaysSend() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlwaysSend")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAlwaysSend indicates an expected call of IsAlwaysSend.
func (mr *MockDHCPOptionAccessorMockRecorder) IsAlwaysSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlwaysSend", reflect.TypeOf((*MockDHCPOptionAccessor)(nil).IsAlwaysSend))
}
