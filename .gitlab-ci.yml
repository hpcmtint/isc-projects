# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
image: registry.gitlab.isc.org/isc-projects/stork/ci-base:latest
workflow:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
variables:
  POSTGRES_ADDR: postgres:5432
  POSTGRES_DB: storktest
  POSTGRES_USER: storktest
  POSTGRES_PASSWORD: storktest
  SUPPRESS_DB_MAINTENANCE: 'true'
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
  OLD_CI: 'yes'
stages:
- build
- test
- deploy
cache:
  key: one-shared-key-2
  paths:
  - webui/node_modules/
  - tools/
".base_build_debian":
  stage: build
  rules:
  - when: always
  tags:
  - linux
  - amd64
  - ssd
  before_script:
  - sysctl -w net.ipv6.conf.all.disable_ipv6=1
  - sysctl -w net.ipv6.conf.default.disable_ipv6=1
  - apt-get update
  - apt-get install -y ruby-dev make python3-venv
  - rake prepare
  - rake prepare:deps
".base_build_centos":
  stage: build
  rules:
  - when: always
  cache:
    key: one-shared-key-rpm-2
    paths:
    - webui/node_modules/
    - tools/
  image: registry.gitlab.isc.org/isc-projects/stork/pkgs-centos-8:latest
  tags:
  - linux
  - amd64
  - ssd
  before_script:
  - sysctl -w net.ipv6.conf.all.disable_ipv6=1
  - sysctl -w net.ipv6.conf.default.disable_ipv6=1
  - rake prepare
  - rake prepare:deps
lint_backend:
  extends: ".base_build_debian"
  script:
  - rake lint:backend
unittest_backend:
  extends: ".base_build_debian"
  services:
  - name: registry.gitlab.isc.org/isc-projects/stork/ci-postgres:11
    alias: postgres
  script:
  - echo 'postgres:*:*:storktest:storktest' > ~/.pgpass
  - chmod 600 ~/.pgpass
  - rake unittest:backend
lint_ui:
  extends: ".base_build_debian"
  script:
  - rake lint:ui
unittest_ui:
  extends: ".base_build_debian"
  script:
  - rake unittest:ui
build_ui:
  extends: ".base_build_debian"
  script:
  - rake build:ui
  artifacts:
    name: ui
    expire_in: 1 week
    paths:
    - webui/dist/stork/
build_backend:
  extends: ".base_build_debian"
  script:
  - rake build:backend
  artifacts:
    name: backend
    expire_in: 1 week
    paths:
    - backend/cmd/stork-agent/stork-agent
    - backend/cmd/stork-server/stork-server
    - backend/cmd/stork-db-migrate/stork-db-migrate
danger:
  extends: ".base_build_debian"
  stage: build
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  tags:
  - linux
  - amd64
  - ssd
  before_script:
  - export CI_MERGE_REQUEST_ID=$(git ls-remote -q origin merge-requests\*\head | grep
    $CI_COMMIT_SHA | sed 's/.*refs\/merge-requests\/\([0-9]*\)\/head/\1/g')
  - export CI_PROJECT_PATH=$CI_PROJECT_ID
  - export DANGER_GITLAB_HOST=gitlab.isc.org
  - export DANGER_GITLAB_API_BASE_URL=https://gitlab.isc.org/api/v4
  script:
  - sysctl -w net.ipv6.conf.all.disable_ipv6=1
  - sysctl -w net.ipv6.conf.default.disable_ipv6=1
  - rake lint:git
tarball:
  stage: build
  rules:
  - when: always
  tags:
  - linux
  - amd64
  - ssd
  script:
  - rake release:tarball
  artifacts:
    paths:
    - stork-*.tar.gz
    expire_in: 1 week
build_debs:
  extends: ".base_build_debian"
  script:
  - rake build:agent_pkg
  - rake build:server_pkg
  - cp dist/pkgs/*.deb ./
  artifacts:
    paths:
    - isc-stork-*.deb
    expire_in: 1 hour
build_rpms:
  extends: ".base_build_centos"
  script:
  - rake build:agent_pkg
  - rake build:server_pkg
  - cp dist/pkgs/*.rpm ./
  artifacts:
    paths:
    - isc-stork-*.rpm
    expire_in: 1 hour
debs_and_rpms:
  stage: build
  rules:
  - when: on_success
  needs:
  - build_debs
  - build_rpms
  script:
  - ":"
  artifacts:
    paths:
    - isc-stork-*
    expire_in: 1 week
system_testing:
  stage: test
  allow_failure: false
  tags:
  - linux
  - docker
  - amd64
  - ssd
  services:
  - docker:dind
  rules:
  - when: on_success
  image: docker/compose:1.29.2
  cache:
    key: system-tests-key-2
    paths:
    - tools/
  before_script:
  - ip -6 route del default
  - apk update
  - apk add --no-cache openjdk11-jre-headless python3 openssl ruby-rake nodejs npm
  variables:
    USE_SYSTEM_NODEJS: 'true'
    DEFAULT_MAPPED_ADDRESS: docker
  script:
  - rake systemtest
  artifacts:
    paths:
    - tests/system/test-results/**/*.log
    expire_in: 1 week
    when: always
deploy_to_repo:
  stage: deploy
  when: manual
  allow_failure: true
  tags:
  - linux
  - amd64
  - ssd
  - stork-repo
  needs:
  - tarball
  before_script:
  - sysctl -w net.ipv6.conf.all.disable_ipv6=1
  - sysctl -w net.ipv6.conf.default.disable_ipv6=1
  script:
  - export LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'
  - ls -al
  - git clone https://gitlab.isc.org/isc-projects/stork.wiki
  - stork_version=`perl -lne 'print $1 if /(\d+\.\d+\.\d+)/' < backend/version.go`
  - output=Stork-${stork_version}-ReleaseNotes.txt
  - cat "./stork.wiki/Releases/Release-notes-${stork_version}.md" | sed '/^```/d'
    | sed 's/\\\[/[/g;s/\\\]/]/g' | perl -pe 's|\[(http.*?)\]\(http.*\)|\1|' | fold
    -sw 73 > "${output}"
  - eval $(ssh-agent -s)
  - echo "$REPO_SSH_PRIVATE_KEY" | base64 -d | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 0700 ~/.ssh
  - touch ~/.ssh/known_hosts
  - ssh-keyscan repo.isc.org >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - destdir=/data/shared/sweng/stork/releases/${stork_version}
  - test -n "${DRY_RUN}" && exit 0
  - ssh -4 storkpush@repo.isc.org mkdir -p $destdir
  - scp -4 stork-${stork_version}.tar.gz $output storkpush@repo.isc.org:$destdir/
  - ssh -4 storkpush@repo.isc.org chmod -R g+w $destdir
  - ssh -4 storkpush@repo.isc.org ls -al $destdir
  - ssh -4 storkpush@repo.isc.org sha256 $destdir/stork-*.tar.gz
  artifacts:
    name: release-notes
    expire_in: 1 week
    paths:
    - Stork-*-ReleaseNotes.txt
deploy_demo:
  stage: deploy
  cache: []
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    when: always
  allow_failure: true
  tags:
  - linux
  - amd64
  - ssd
  needs:
  - danger
  before_script:
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY_STORK" | base64 -d | ssh-add -
  script:
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org docker info
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org docker version
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org docker-compose version
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org "docker ps -q | xargs
    docker kill || true"
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org docker container prune
    -f
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org docker network prune
    -f
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org docker volume prune
    -f
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org sudo systemctl restart
    docker
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org rm -rf deploy/*
  - scp -o StrictHostKeyChecking=no -r $PWD/* jenkins@stork.lab.isc.org:~/deploy
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org CS_REPO_ACCESS_TOKEN=$CLOUDSMITH_REPO_ACCESS_TOKEN
    docker-compose --project-directory deploy -f deploy/docker/docker-compose.yaml
    -f deploy/docker/docker-compose-premium.yaml build
  - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org docker-compose --project-directory
    deploy -f deploy/docker/docker-compose.yaml -f deploy/docker/docker-compose-premium.yaml
    up -d
deploy_pkgs:
  stage: deploy
  rules:
  - when: manual
  allow_failure: true
  image: registry.gitlab.isc.org/isc-projects/stork/pkgs-cloudsmith:latest
  tags:
  - linux
  - docker
  - amd64
  - ssd
  needs:
  - debs_and_rpms
  before_script:
  - sysctl -w net.ipv6.conf.all.disable_ipv6=1
  - sysctl -w net.ipv6.conf.default.disable_ipv6=1
  script:
  - ls -al
  - export LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'
  - cloudsmith check service
  - cloudsmith whoami -k $CLOUDSMITH_API_KEY
  - if [ -z "$REPO" ]; then export REPO="stork-testing"; fi
  - cloudsmith upload deb -k $CLOUDSMITH_API_KEY -W --republish isc/$REPO/any-distro/any-version
    isc-stork-agent*deb
  - cloudsmith upload deb -k $CLOUDSMITH_API_KEY -W --republish isc/$REPO/any-distro/any-version
    isc-stork-server*deb
  - cloudsmith upload rpm -k $CLOUDSMITH_API_KEY -W --republish isc/$REPO/any-distro/any-version
    isc-stork-agent*rpm
  - cloudsmith upload rpm -k $CLOUDSMITH_API_KEY -W --republish isc/$REPO/any-distro/any-version
    isc-stork-server*rpm
sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml
