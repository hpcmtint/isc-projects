image: registry.gitlab.isc.org/isc-projects/stork/ci-base:latest

variables:
  POSTGRES_ADDR: postgres:5432
  POSTGRES_DB: storktest
  POSTGRES_USER: storktest
  POSTGRES_PASSWORD: storktest
  POSTGRES_IN_DOCKER: yes

# this is used to build docker images of stork (using DIND)
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""  # this is workaround for TLS problem https://about.gitlab.com/blog/2019/07/31/docker-in-docker-with-docker-19-dot-03/

# stages order
stages:
  - build
  - deploy

# cache
cache:
  key: one-shared-key-2
  paths:
  - webui/node_modules/
  - tools/


### build jobs ###

# common parts used in build jobs
.base_build:
  stage: build
  tags:
    - linux
    - amd64
  before_script:
    - sysctl -w net.ipv6.conf.all.disable_ipv6=1
    - sysctl -w net.ipv6.conf.default.disable_ipv6=1
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends wget xz-utils rake openjdk-11-jre-headless gcc g++ chromium-browser unzip python3-sphinx python3-sphinx-rtd-theme iputils-ping
    - rake prepare_env

lint_go:
  extends: .base_build
  script:
    - rake lint_go

unittest_backend:
  extends: .base_build
  services:
    - name: registry.gitlab.isc.org/isc-projects/stork/ci-postgres:11
      alias: postgres
  script:
    - DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends postgresql-client
    - echo 'postgres:*:*:storktest:storktest' > ~/.pgpass
    - chmod 600 ~/.pgpass
    - rake unittest_backend

ci_ui:
  extends: .base_build
  script:
    - rake ci_ui

build_webui:
  extends: .base_build
  script:
    - rake build_ui
  artifacts:
    name: "webui"
    expire_in: 1 week
    paths:
      - webui/dist/stork/

build_backend:
  extends: .base_build
  script:
    - rake build_backend
  artifacts:
    name: "backend"
    expire_in: 1 week
    paths:
      - backend/cmd/stork-agent/stork-agent
      - backend/cmd/stork-server/stork-server
      - backend/cmd/stork-db-migrate/stork-db-migrate

danger:
  stage: build
  tags:
    - linux
    - amd64
  image: registry.gitlab.isc.org/isc-projects/stork/ci-danger
  before_script:
    - export CI_MERGE_REQUEST_ID=$(git ls-remote -q origin merge-requests\*\head | grep $CI_COMMIT_SHA | sed 's/.*refs\/merge-requests\/\([0-9]*\)\/head/\1/g')
    - export CI_PROJECT_PATH=$CI_PROJECT_ID #some version of gitlab has problems with searching by project path
    - export DANGER_GITLAB_HOST=gitlab.isc.org
    - export DANGER_GITLAB_API_BASE_URL=https://gitlab.isc.org/api/v4
  script:
    - sysctl -w net.ipv6.conf.all.disable_ipv6=1
    - sysctl -w net.ipv6.conf.default.disable_ipv6=1
    - gem install danger-commit_lint
    - danger --fail-on-errors=true --new-comment

tarball:
  stage: build
  tags:
    - linux
    - amd64
  script:
    - rake tarball
  artifacts:
    paths:
      - stork-*.tar.gz
    expire_in: 1 week


### build rpm & deb packages ###

debs:
  stage: build
  image: registry.gitlab.isc.org/isc-projects/stork/pkgs-ubuntu-18-04:latest
  tags:
    - linux
    - amd64
  before_script:
    - sysctl -w net.ipv6.conf.all.disable_ipv6=1
    - sysctl -w net.ipv6.conf.default.disable_ipv6=1
  script:
    - rake build_pkgs
  artifacts:
    paths:
      - isc-stork-*deb
    expire_in: 1 week

rpms:
  stage: build
  image: registry.gitlab.isc.org/isc-projects/stork/pkgs-centos-8:latest
  tags:
    - linux
    - amd64
  before_script:
    - sysctl -w net.ipv6.conf.all.disable_ipv6=1
    - sysctl -w net.ipv6.conf.default.disable_ipv6=1
  script:
    - rake build_pkgs
  artifacts:
    paths:
      - isc-stork-*rpm
    expire_in: 1 week


### demo deploy jobs ###

deploy_demo:
  stage: build
  when: manual
  image: docker:latest
  tags:
    - linux
    - docker
    - amd64
  services:
    - docker:dind
  before_script:
    - ip -6 route del default
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - apk update
    - apk upgrade
    - apk add docker-compose ruby-rake
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_STORK" | base64 -d | ssh-add -
  script:
    - rake build_all_in_container
    - docker-compose -f docker-compose.yaml -f docker-compose-premium.yaml build --build-arg CS_REPO_ACCESS_TOKEN=$CLOUDSMITH_REPO_ACCESS_TOKEN
    - docker-compose push
    - scp -o StrictHostKeyChecking=no docker-compose.yaml jenkins@stork.lab.isc.org:~/deploy
    - scp -o StrictHostKeyChecking=no docker-compose-premium.yaml jenkins@stork.lab.isc.org:~/deploy
    - scp -o StrictHostKeyChecking=no docker/prometheus.yml jenkins@stork.lab.isc.org:~/deploy/docker/prometheus.yml
    - scp -o StrictHostKeyChecking=no grafana/kea-dhcp4.json jenkins@stork.lab.isc.org:~/deploy/grafana/kea-dhcp4.json
    - scp -o StrictHostKeyChecking=no docker/grafana/dashboards.yaml jenkins@stork.lab.isc.org:~/deploy/docker/grafana/dashboards.yaml
    - scp -o StrictHostKeyChecking=no docker/grafana/datasource.yaml jenkins@stork.lab.isc.org:~/deploy/docker/grafana/datasource.yaml
    - scp -o StrictHostKeyChecking=no docker/grafana/grafana.ini jenkins@stork.lab.isc.org:~/deploy/docker/grafana/grafana.ini
    - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org docker-compose -f deploy/docker-compose.yaml -f deploy/docker-compose-premium.yaml down
    - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org docker-compose -f deploy/docker-compose.yaml -f deploy/docker-compose-premium.yaml pull
    - ssh -o StrictHostKeyChecking=no jenkins@stork.lab.isc.org docker-compose -f deploy/docker-compose.yaml -f deploy/docker-compose-premium.yaml up -d --no-build


### deploy pkgs to cloudsmith.io ###

deploy_pkgs:
  stage: deploy
  when: manual
  image: registry.gitlab.isc.org/isc-projects/stork/pkgs-cloudsmith:latest
  tags:
    - linux
    - docker
    - amd64
  dependencies:
    - rpms
    - debs
  before_script:
    - sysctl -w net.ipv6.conf.all.disable_ipv6=1
    - sysctl -w net.ipv6.conf.default.disable_ipv6=1
  script:
    - ls -al
    - export LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'
    - cloudsmith check service
    - cloudsmith whoami -k $CLOUDSMITH_API_KEY
    - if [ -z "$REPO" ]; then export REPO="stork-testing"; fi
    - cloudsmith upload deb -k $CLOUDSMITH_API_KEY -W --republish isc/$REPO/any-distro/any-version isc-stork-agent*deb
    - cloudsmith upload deb -k $CLOUDSMITH_API_KEY -W --republish isc/$REPO/any-distro/any-version isc-stork-server*deb
    - cloudsmith upload rpm -k $CLOUDSMITH_API_KEY -W --republish isc/$REPO/any-distro/any-version isc-stork-agent*rpm
    - cloudsmith upload rpm -k $CLOUDSMITH_API_KEY -W --republish isc/$REPO/any-distro/any-version isc-stork-server*rpm
