version: '2.1'

services:
  server-base:
    restart: always
    build:
      context: .
      dockerfile: $PWD/docker/images/stork.Dockerfile
      target: server
    networks:
      - storknet
    hostname: server
    expose:
      - "8080"
    ports:
      - "42080:8080"
    environment:
      STORK_DATABASE_HOST: postgres
      STORK_DATABASE_PORT: 5432
      STORK_DATABASE_USER_NAME: stork
      STORK_DATABASE_PASSWORD: stork
      STORK_DATABASE_NAME: stork
      STORK_SERVER_ENABLE_METRICS: 1
    healthcheck:
      interval: 250ms
      timeout: 1s
      retries: 40

  server:
    extends: server-base
    depends_on:
      - postgres

  server-db-ssl-require:
    extends: server-base
    environment:
      STORK_DATABASE_SSLMODE: require
    depends_on:
      - postgres

  server-db-ssl-ca-verify:
    extends: server-base
    environment:
      STORK_DATABASE_SSLMODE: ca-verify
    depends_on:
      - postgres

  server6:
    extends: server-base
    ports:
      - ":::42081:8080"
    environment:
      STORK_REST_HOST: "::"
    depends_on:
      - postgres

  agent-kea:
    restart: always
    build:
      context: .
      dockerfile: $PWD/docker/images/stork.Dockerfile
      target: kea
    hostname: agent-kea
    networks:
      storknet:
        ipv4_address: 172.20.42.100
        priority: 1000
      subnet_00:
        ipv4_address: 172.100.42.100
        priority: 500
      subnet_01:
        ipv4_address: 172.101.42.100
        priority: 400
      subnet_02:
        ipv4_address: 172.102.42.100
        priority: 300
      subnet6_00:
        ipv6_address: 3000:db8:1:42::100
        priority: 500
      subnet6_01:
        ipv6_address: 3001:db8:1:42::100
        priority: 400
    expose:
      - "8080" # stork server to agent
      - "9547" # kea_exporter for prometheus
    environment:
      DB_TYPE: none
      STORK_AGENT_SERVER_URL: ${STORK_SERVER_URL-http://server:8080}
      STORK_AGENT_HOST: 172.20.42.100
    healthcheck:
      interval: 250ms
      timeout: 1s
      retries: 40
    volumes:
      - $PWD/tests/system/config/kea/kea-ctrl-agent.conf:/etc/kea/kea-ctrl-agent.conf
      - $PWD/tests/system/config/kea/kea-ctrl-agent-tls.json:/etc/kea/kea-ctrl-agent-tls.json
      - $PWD/tests/system/config/kea/kea-ctrl-agent-auth.json:/etc/kea/kea-ctrl-agent-auth.json
      - $PWD/tests/system/config/kea/kea-dhcp4.conf:/etc/kea/kea-dhcp4.conf
      - $PWD/tests/system/config/kea/kea-dhcp6.conf:/etc/kea/kea-dhcp6.conf
      - $PWD/tests/system/config/kea/kea-leases4.csv:/var/lib/kea/kea-leases4.csv
      - $PWD/tests/system/config/kea/kea-leases6.csv:/var/lib/kea/kea-leases6.csv
      - $PWD/docker/config/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf
      - $PWD/docker/config/supervisor/kea-agent.conf:/etc/supervisor/conf.d/kea-agent.conf
      - $PWD/docker/config/supervisor/kea-dhcp4.conf:/etc/supervisor/conf.d/kea-dhcp4.conf
      - $PWD/docker/config/supervisor/kea-dhcp6.conf:/etc/supervisor/conf.d/kea-dhcp6.conf
      - $PWD/docker/config/supervisor/stork-agent.conf:/etc/supervisor/conf.d/stork-agent.conf

  agent-kea-many-subnets:
    extends: agent-kea
    volumes:
      - $PWD/tests/system/config/kea-many-subnets/kea-dhcp4.conf:/etc/kea/kea-dhcp4.conf

  agent-kea6:
    extends: agent-kea
    networks:
      storknet:
        ipv6_address: 3009:db8:1:42::100
    environment:
      STORK_AGENT_HOST: 3000:db8:1:42::100

  agent-kea-tls-optional-client-cert-no-verify:
    extends: agent-kea
    volumes:
      - $PWD/tests/system/config/kea-tls/optional-client-cert.json:/etc/kea/kea-ctrl-agent-tls.json
      - $PWD/tests/system/config/certs/cert.pem:/root/certs/cert.pem
      - $PWD/tests/system/config/certs/key.pem:/root/certs/key.pem
      - $PWD/tests/system/config/certs/CA:/root/certs/CA
    environment:
      STORK_AGENT_SKIP_TLS_CERT_VERIFICATION: "true"

  agent-kea-tls-required-client-cert-no-verify:
    extends: agent-kea-tls-optional-client-cert-no-verify
    volumes:
      - $PWD/tests/system/config/kea-tls/required-client-cert.json:/etc/kea/kea-ctrl-agent-tls.json

  agent-kea-tls-optional-client-cert-verify:
    extends: agent-kea-tls-optional-client-cert-no-verify
    environment:
      STORK_AGENT_SKIP_TLS_CERT_VERIFICATION: "false"

  agent-kea-config-review:
    extends: agent-kea
    volumes:
      - $PWD/tests/system/config/kea-config-review/kea-dhcp4.conf:/etc/kea/kea-dhcp4.conf

  agent-kea-basic-auth-no-credentials:
    extends: agent-kea
    environment:
      STORK_AGENT_SKIP_TLS_CERT_VERIFICATION: "true"
    volumes:
      - $PWD/tests/system/config/kea-basic-auth/kea-ctrl-agent-auth.json:/etc/kea/kea-ctrl-agent-auth.json

  agent-kea-basic-auth:
    extends: agent-kea-basic-auth-no-credentials
    volumes:
      - $PWD/tests/system/config/kea-basic-auth/agent-credentials.json:/etc/stork/agent-credentials.json

  agent-bind9:
    restart: always
    build:
      context: .
      dockerfile: $PWD/docker/images/stork.Dockerfile
      target: bind
    hostname: agent-bind9
    networks:
      storknet:
        ipv4_address: 172.20.42.53
    environment:
      STORK_AGENT_SERVER_URL: ${STORK_SERVER_URL-http://server:8080}
      STORK_AGENT_HOST: 172.20.42.53
    expose:
      - "8080"
      - "9100" # node_exporter for prometheus
      - "9119" # bind_exporter for prometheus
    volumes:
      - $PWD/tests/system/config/bind/db.test:/etc/bind/db.test
      - $PWD/tests/system/config/bind/named.conf:/etc/bind/named.conf
      - $PWD/docker/config/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf
      - $PWD/docker/config/supervisor/named.conf:/etc/supervisor/conf.d/named.conf
      - $PWD/docker/config/supervisor/stork-agent.conf:/etc/supervisor/conf.d/stork-agent.conf

  perfdhcp:
    restart: always
    build:
      context: .
      dockerfile: $PWD/docker/images/stork.Dockerfile
      target: kea
    entrypoint: /usr/sbin/perfdhcp
    hostname: perfdhcp
    networks:
      storknet:
        ipv4_address: 172.20.42.200
        priority: 1000
      subnet_00:
        ipv4_address: 172.100.42.200
        priority: 500
      subnet_01:
        ipv4_address: 172.101.42.200
        priority: 400
      subnet_02:
        ipv4_address: 172.102.42.200
        priority: 300
      subnet6_00:
        ipv6_address: 3000:db8:1:42::200
        priority: 500
      subnet6_01:
        ipv6_address: 3001:db8:1:42::200
        priority: 400
    healthcheck:
      disable: true

  postgres:
    image: postgres:11
    command: -c ssl=on -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
    networks:
      storknet:
        ipv4_address: 172.20.42.234
    environment:
      POSTGRES_USER: stork
      POSTGRES_PASSWORD: stork
      POSTGRES_DB: stork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U stork" ]
      interval: 250ms
      timeout: 1s
      retries: 40

networks:
  storknet:
    enable_ipv6: true
    ipam:
      config:
        - subnet: 172.20.42.0/24
        - subnet: 3009:db8:1:42::/64
  subnet_00:
    ipam:
      config:
        - subnet: 172.100.42.0/24
  subnet_01:
    ipam:
      config:
        - subnet: 172.101.42.0/24
  subnet_02:
    ipam:
      config:
        - subnet: 172.102.42.0/24
  subnet6_00:
    enable_ipv6: true
    ipam:
      config:
        - subnet: 3000:db8:1:42::/64
  subnet6_01:
    enable_ipv6: true
    ipam:
      config:
        - subnet: 3001:db8:1:42::/64
